
AVR PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000da2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000da2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001586  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a43  00000000  00000000  000024e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c46  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00003b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bab  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005043  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <main>
  74:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_INIT>:
#include "APPLICATION.h"
//#include "util/delay.h"
int mode=0;
APP_ERRORS APP_INIT()
{
	SREG|=(1<<7);
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
	MCUCR|=(1<<1)|(1<<0);
  82:	85 b7       	in	r24, 0x35	; 53
  84:	83 60       	ori	r24, 0x03	; 3
  86:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<6);
  88:	8b b7       	in	r24, 0x3b	; 59
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8b bf       	out	0x3b, r24	; 59
	BUTTON_init(B_D,2);
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	84 e4       	ldi	r24, 0x44	; 68
  92:	0e 94 74 00 	call	0xe8	; 0xe8 <BUTTON_init>
while(1)
{
	NORMAL_MODE();	
  96:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <NORMAL_MODE>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <APP_INIT+0x1a>

0000009c <__vector_1>:
}
	return APP_OK;
}
ISR(EXT_INT(1))
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	PREDESTRAIN_MODE(NORMAL_MODE());
  be:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <NORMAL_MODE>
  c2:	0e 94 83 04 	call	0x906	; 0x906 <PREDESTRAIN_MODE>
  c6:	ff 91       	pop	r31
  c8:	ef 91       	pop	r30
  ca:	bf 91       	pop	r27
  cc:	af 91       	pop	r26
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	7f 91       	pop	r23
  d4:	6f 91       	pop	r22
  d6:	5f 91       	pop	r21
  d8:	4f 91       	pop	r20
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <BUTTON_init>:
 * Author: MOSTAFA EMARY
 */
#include "BUTTON.h"

BUTTON_S BUTTON_init(vuint8_t portnumber,vuint8_t pinnumber)//button is an input device
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <BUTTON_init+0x6>
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(portnumber,pinnumber,INPUT);
  f6:	6a 81       	ldd	r22, Y+2	; 0x02
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
	return BUTTON_OK ;
}
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LED_init>:
 * Created: 9/30/2022 2:22:24 PM
 * Author: MOSTAFA EMARY
 */ 
#include "LED.h"
LED_ERRORS LED_init(vuint8_t portnumber,vuint8_t pinnumber)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <LED_init+0x6>
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(portnumber, pinnumber , OUTPUT);
 11a:	6a 81       	ldd	r22, Y+2	; 0x02
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
	return LED_OK;
}
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <PIN_MODE>:
LED_MODE PIN_MODE(vuint8_t portnumber,vuint8_t pinnumber,LED_MODE mode)
{
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <PIN_MODE+0x8>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	89 83       	std	Y+1, r24	; 0x01
 13e:	6a 83       	std	Y+2, r22	; 0x02
 140:	14 2f       	mov	r17, r20
		LED_init(portnumber,pinnumber);
 142:	6a 81       	ldd	r22, Y+2	; 0x02
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	0e 94 86 00 	call	0x10c	; 0x10c <LED_init>
		if(mode==led_ON)
 14a:	11 30       	cpi	r17, 0x01	; 1
 14c:	39 f4       	brne	.+14     	; 0x15c <PIN_MODE+0x2c>
		{
		DIO_write(portnumber, pinnumber, HIGH);
 14e:	6a 81       	ldd	r22, Y+2	; 0x02
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_write>
		return led_ON;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e c0       	rjmp	.+28     	; 0x178 <PIN_MODE+0x48>
		}
		else if(mode==led_OFF)
 15c:	11 11       	cpse	r17, r1
 15e:	07 c0       	rjmp	.+14     	; 0x16e <PIN_MODE+0x3e>
		{
		DIO_write(portnumber, pinnumber, LOW);
 160:	6a 81       	ldd	r22, Y+2	; 0x02
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_write>
		return led_OFF;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	05 c0       	rjmp	.+10     	; 0x178 <PIN_MODE+0x48>
		}
		else
		{
		DIO_toggle(portnumber,pinnumber);
 16e:	6a 81       	ldd	r22, Y+2	; 0x02
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_toggle>
		return led_TOGGLE;
 176:	82 e0       	ldi	r24, 0x02	; 2
		}
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <LED_ON>:
LED_MODE LED_ON(vuint8_t portnumber,vuint8_t pinnumber)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <LED_ON+0x6>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6a 83       	std	Y+2, r22	; 0x02
	LED_init(portnumber,pinnumber);
 192:	6a 81       	ldd	r22, Y+2	; 0x02
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	0e 94 86 00 	call	0x10c	; 0x10c <LED_init>
	PIN_MODE(portnumber, pinnumber, led_ON);
 19a:	6a 81       	ldd	r22, Y+2	; 0x02
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	0e 94 98 00 	call	0x130	; 0x130 <PIN_MODE>
	return led_ON;
}
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LED_TOGGLE>:
LED_MODE LED_TOGGLE(vuint8_t portnumber,vuint8_t pinnumber,float t)
{
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <LED_TOGGLE+0xe>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	6a 83       	std	Y+2, r22	; 0x02
 1c6:	69 01       	movw	r12, r18
 1c8:	7a 01       	movw	r14, r20
	LED_init(portnumber,pinnumber);
 1ca:	6a 81       	ldd	r22, Y+2	; 0x02
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	0e 94 86 00 	call	0x10c	; 0x10c <LED_init>
	PIN_MODE(portnumber, pinnumber, led_ON);
 1d2:	6a 81       	ldd	r22, Y+2	; 0x02
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <PIN_MODE>
	delay1(t);
 1dc:	c7 01       	movw	r24, r14
 1de:	b6 01       	movw	r22, r12
 1e0:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	PIN_MODE(portnumber, pinnumber, led_OFF);
 1e4:	6a 81       	ldd	r22, Y+2	; 0x02
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	0e 94 98 00 	call	0x130	; 0x130 <PIN_MODE>
	delay1(t);
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	return led_TOGGLE;
}
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <LED_OFF>:
LED_MODE LED_OFF(vuint8_t portnumber,vuint8_t pinnumber)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <LED_OFF+0x6>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	89 83       	std	Y+1, r24	; 0x01
 216:	6a 83       	std	Y+2, r22	; 0x02
	LED_init(portnumber,pinnumber);
 218:	6a 81       	ldd	r22, Y+2	; 0x02
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	0e 94 86 00 	call	0x10c	; 0x10c <LED_init>
	PIN_MODE(portnumber, pinnumber, led_OFF);
 220:	6a 81       	ldd	r22, Y+2	; 0x02
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	0e 94 98 00 	call	0x130	; 0x130 <PIN_MODE>
	return led_OFF;
}
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <LED_BLINK>:
LED_MODE LED_BLINK(vuint8_t portnumber,vuint8_t pinnumber,int blink,float t)
{
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <LED_BLINK+0x12>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
 250:	68 01       	movw	r12, r16
 252:	79 01       	movw	r14, r18
	while(blink--)
 254:	07 c0       	rjmp	.+14     	; 0x264 <LED_BLINK+0x2e>
	{
		LED_TOGGLE(portnumber,pinnumber,t);
 256:	6a 81       	ldd	r22, Y+2	; 0x02
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	a7 01       	movw	r20, r14
 25c:	96 01       	movw	r18, r12
 25e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_TOGGLE>
	PIN_MODE(portnumber, pinnumber, led_OFF);
	return led_OFF;
}
LED_MODE LED_BLINK(vuint8_t portnumber,vuint8_t pinnumber,int blink,float t)
{
	while(blink--)
 262:	a8 01       	movw	r20, r16
 264:	8a 01       	movw	r16, r20
 266:	01 50       	subi	r16, 0x01	; 1
 268:	11 09       	sbc	r17, r1
 26a:	45 2b       	or	r20, r21
 26c:	a1 f7       	brne	.-24     	; 0x256 <LED_BLINK+0x20>
	{
		LED_TOGGLE(portnumber,pinnumber,t);
	}
	return led_BLINK;
}
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	08 95       	ret

00000286 <DIO_init>:
		}
		return DELAY_OK;
	}
	else
		return DELAY_ERROR;
}
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <DIO_init+0x6>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	6a 83       	std	Y+2, r22	; 0x02
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	82 34       	cpi	r24, 0x42	; 66
 298:	61 f1       	breq	.+88     	; 0x2f2 <DIO_init+0x6c>
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <DIO_init+0x1c>
 29c:	81 34       	cpi	r24, 0x41	; 65
 29e:	41 f0       	breq	.+16     	; 0x2b0 <DIO_init+0x2a>
 2a0:	89 c0       	rjmp	.+274    	; 0x3b4 <DIO_init+0x12e>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_init+0x22>
 2a6:	46 c0       	rjmp	.+140    	; 0x334 <DIO_init+0xae>
 2a8:	84 34       	cpi	r24, 0x44	; 68
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_init+0x28>
 2ac:	63 c0       	rjmp	.+198    	; 0x374 <DIO_init+0xee>
 2ae:	82 c0       	rjmp	.+260    	; 0x3b4 <DIO_init+0x12e>
 2b0:	41 11       	cpse	r20, r1
 2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <DIO_init+0x4c>
 2b4:	2a 81       	ldd	r18, Y+2	; 0x02
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_init+0x3a>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	2a 95       	dec	r18
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_init+0x36>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	9a b3       	in	r25, 0x1a	; 26
 2ca:	89 23       	and	r24, r25
 2cc:	8a bb       	out	0x1a, r24	; 26
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	7a c0       	rjmp	.+244    	; 0x3c6 <DIO_init+0x140>
 2d2:	41 30       	cpi	r20, 0x01	; 1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <DIO_init+0x52>
 2d6:	70 c0       	rjmp	.+224    	; 0x3b8 <DIO_init+0x132>
 2d8:	2a 81       	ldd	r18, Y+2	; 0x02
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_init+0x5e>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	2a 95       	dec	r18
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_init+0x5a>
 2e8:	9a b3       	in	r25, 0x1a	; 26
 2ea:	89 2b       	or	r24, r25
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	6a c0       	rjmp	.+212    	; 0x3c6 <DIO_init+0x140>
 2f2:	41 11       	cpse	r20, r1
 2f4:	0f c0       	rjmp	.+30     	; 0x314 <DIO_init+0x8e>
 2f6:	2a 81       	ldd	r18, Y+2	; 0x02
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_init+0x7c>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	2a 95       	dec	r18
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_init+0x78>
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	97 b3       	in	r25, 0x17	; 23
 30c:	89 23       	and	r24, r25
 30e:	87 bb       	out	0x17, r24	; 23
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	59 c0       	rjmp	.+178    	; 0x3c6 <DIO_init+0x140>
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <DIO_init+0x94>
 318:	51 c0       	rjmp	.+162    	; 0x3bc <DIO_init+0x136>
 31a:	2a 81       	ldd	r18, Y+2	; 0x02
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_init+0xa0>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_init+0x9c>
 32a:	97 b3       	in	r25, 0x17	; 23
 32c:	89 2b       	or	r24, r25
 32e:	87 bb       	out	0x17, r24	; 23
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	49 c0       	rjmp	.+146    	; 0x3c6 <DIO_init+0x140>
 334:	41 11       	cpse	r20, r1
 336:	0f c0       	rjmp	.+30     	; 0x356 <DIO_init+0xd0>
 338:	2a 81       	ldd	r18, Y+2	; 0x02
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_init+0xbe>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	2a 95       	dec	r18
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_init+0xba>
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	94 b3       	in	r25, 0x14	; 20
 34e:	89 23       	and	r24, r25
 350:	84 bb       	out	0x14, r24	; 20
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	38 c0       	rjmp	.+112    	; 0x3c6 <DIO_init+0x140>
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	99 f5       	brne	.+102    	; 0x3c0 <DIO_init+0x13a>
 35a:	2a 81       	ldd	r18, Y+2	; 0x02
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0xe0>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	2a 95       	dec	r18
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0xdc>
 36a:	94 b3       	in	r25, 0x14	; 20
 36c:	89 2b       	or	r24, r25
 36e:	84 bb       	out	0x14, r24	; 20
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	29 c0       	rjmp	.+82     	; 0x3c6 <DIO_init+0x140>
 374:	41 11       	cpse	r20, r1
 376:	0f c0       	rjmp	.+30     	; 0x396 <DIO_init+0x110>
 378:	2a 81       	ldd	r18, Y+2	; 0x02
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_init+0xfe>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	2a 95       	dec	r18
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_init+0xfa>
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	91 b3       	in	r25, 0x11	; 17
 38e:	89 23       	and	r24, r25
 390:	81 bb       	out	0x11, r24	; 17
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	18 c0       	rjmp	.+48     	; 0x3c6 <DIO_init+0x140>
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	a9 f4       	brne	.+42     	; 0x3c4 <DIO_init+0x13e>
 39a:	2a 81       	ldd	r18, Y+2	; 0x02
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_init+0x120>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	2a 95       	dec	r18
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_init+0x11c>
 3aa:	91 b3       	in	r25, 0x11	; 17
 3ac:	89 2b       	or	r24, r25
 3ae:	81 bb       	out	0x11, r24	; 17
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <DIO_init+0x140>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <DIO_init+0x140>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <DIO_init+0x140>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <DIO_init+0x140>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <DIO_init+0x140>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <DIO_write>:
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <DIO_write+0x6>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	89 83       	std	Y+1, r24	; 0x01
 3dc:	6a 83       	std	Y+2, r22	; 0x02
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	82 34       	cpi	r24, 0x42	; 66
 3e2:	61 f1       	breq	.+88     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <DIO_write+0x1c>
 3e6:	81 34       	cpi	r24, 0x41	; 65
 3e8:	41 f0       	breq	.+16     	; 0x3fa <DIO_write+0x2a>
 3ea:	89 c0       	rjmp	.+274    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 3ec:	83 34       	cpi	r24, 0x43	; 67
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_write+0x22>
 3f0:	46 c0       	rjmp	.+140    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 3f2:	84 34       	cpi	r24, 0x44	; 68
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <DIO_write+0x28>
 3f6:	63 c0       	rjmp	.+198    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 3f8:	82 c0       	rjmp	.+260    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 3fa:	41 11       	cpse	r20, r1
 3fc:	0f c0       	rjmp	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fe:	2a 81       	ldd	r18, Y+2	; 0x02
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	2a 95       	dec	r18
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	9b b3       	in	r25, 0x1b	; 27
 414:	89 23       	and	r24, r25
 416:	8b bb       	out	0x1b, r24	; 27
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	7a c0       	rjmp	.+244    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	09 f0       	breq	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	70 c0       	rjmp	.+224    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 422:	2a 81       	ldd	r18, Y+2	; 0x02
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	2a 95       	dec	r18
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	9b b3       	in	r25, 0x1b	; 27
 434:	89 2b       	or	r24, r25
 436:	8b bb       	out	0x1b, r24	; 27
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	6a c0       	rjmp	.+212    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 43c:	41 11       	cpse	r20, r1
 43e:	0f c0       	rjmp	.+30     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 440:	2a 81       	ldd	r18, Y+2	; 0x02
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	90 95       	com	r25
 454:	98 b3       	in	r25, 0x18	; 24
 456:	89 23       	and	r24, r25
 458:	88 bb       	out	0x18, r24	; 24
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	59 c0       	rjmp	.+178    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 45e:	41 30       	cpi	r20, 0x01	; 1
 460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	51 c0       	rjmp	.+162    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 464:	2a 81       	ldd	r18, Y+2	; 0x02
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	2a 95       	dec	r18
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	98 b3       	in	r25, 0x18	; 24
 476:	89 2b       	or	r24, r25
 478:	88 bb       	out	0x18, r24	; 24
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	49 c0       	rjmp	.+146    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 47e:	41 11       	cpse	r20, r1
 480:	0f c0       	rjmp	.+30     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 482:	2a 81       	ldd	r18, Y+2	; 0x02
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	2a 95       	dec	r18
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	95 b3       	in	r25, 0x15	; 21
 498:	89 23       	and	r24, r25
 49a:	85 bb       	out	0x15, r24	; 21
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	38 c0       	rjmp	.+112    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	99 f5       	brne	.+102    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4a4:	2a 81       	ldd	r18, Y+2	; 0x02
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	95 b3       	in	r25, 0x15	; 21
 4b6:	89 2b       	or	r24, r25
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	29 c0       	rjmp	.+82     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4be:	41 11       	cpse	r20, r1
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4c2:	2a 81       	ldd	r18, Y+2	; 0x02
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	80 95       	com	r24
 4d4:	90 95       	com	r25
 4d6:	92 b3       	in	r25, 0x12	; 18
 4d8:	89 23       	and	r24, r25
 4da:	82 bb       	out	0x12, r24	; 18
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	18 c0       	rjmp	.+48     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4e0:	41 30       	cpi	r20, 0x01	; 1
 4e2:	a9 f4       	brne	.+42     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 4e4:	2a 81       	ldd	r18, Y+2	; 0x02
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	2a 95       	dec	r18
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f4:	92 b3       	in	r25, 0x12	; 18
 4f6:	89 2b       	or	r24, r25
 4f8:	82 bb       	out	0x12, r24	; 18
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	07 c0       	rjmp	.+14     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	05 c0       	rjmp	.+10     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	03 c0       	rjmp	.+6      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	01 c0       	rjmp	.+2      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <delay1>:


DELAY_E delay1(double t)//time in seconds
{
 51a:	8f 92       	push	r8
 51c:	9f 92       	push	r9
 51e:	af 92       	push	r10
 520:	bf 92       	push	r11
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	6b 01       	movw	r12, r22
 530:	7c 01       	movw	r14, r24
	int n_o_overflow;
	if(t<=0.000256)//no prescaler&no overflows
 532:	2d eb       	ldi	r18, 0xBD	; 189
 534:	37 e3       	ldi	r19, 0x37	; 55
 536:	46 e8       	ldi	r20, 0x86	; 134
 538:	59 e3       	ldi	r21, 0x39	; 57
 53a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__cmpsf2>
 53e:	18 16       	cp	r1, r24
 540:	fc f0       	brlt	.+62     	; 0x580 <delay1+0x66>
	{
		//NORMAL MODE not start
		TCCR0=0x00;
 542:	13 be       	out	0x33, r1	; 51
		TCNT0=(ceil)((0.000256-t)/0.000001);
 544:	a7 01       	movw	r20, r14
 546:	96 01       	movw	r18, r12
 548:	6d eb       	ldi	r22, 0xBD	; 189
 54a:	77 e3       	ldi	r23, 0x37	; 55
 54c:	86 e8       	ldi	r24, 0x86	; 134
 54e:	99 e3       	ldi	r25, 0x39	; 57
 550:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 554:	2d eb       	ldi	r18, 0xBD	; 189
 556:	37 e3       	ldi	r19, 0x37	; 55
 558:	46 e8       	ldi	r20, 0x86	; 134
 55a:	55 e3       	ldi	r21, 0x35	; 53
 55c:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 560:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 564:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 568:	62 bf       	out	0x32, r22	; 50
		TCCR0|=(1<<0);
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<0))==0);
 570:	08 b6       	in	r0, 0x38	; 56
 572:	00 fe       	sbrs	r0, 0
 574:	fd cf       	rjmp	.-6      	; 0x570 <delay1+0x56>
		TIFR|=(1<<0);
 576:	88 b7       	in	r24, 0x38	; 56
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	88 bf       	out	0x38, r24	; 56
		return DELAY_OK;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	ee c0       	rjmp	.+476    	; 0x75c <delay1+0x242>
	}
	else if(t<=0.002048)//8 prescaler&no overflows
 580:	2d eb       	ldi	r18, 0xBD	; 189
 582:	37 e3       	ldi	r19, 0x37	; 55
 584:	46 e0       	ldi	r20, 0x06	; 6
 586:	5b e3       	ldi	r21, 0x3B	; 59
 588:	c7 01       	movw	r24, r14
 58a:	b6 01       	movw	r22, r12
 58c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__cmpsf2>
 590:	18 16       	cp	r1, r24
 592:	fc f0       	brlt	.+62     	; 0x5d2 <delay1+0xb8>
	{
		TCCR0=0x00;
 594:	13 be       	out	0x33, r1	; 51
		TCNT0=(ceil)((0.002048-t)/0.000008);
 596:	a7 01       	movw	r20, r14
 598:	96 01       	movw	r18, r12
 59a:	6d eb       	ldi	r22, 0xBD	; 189
 59c:	77 e3       	ldi	r23, 0x37	; 55
 59e:	86 e0       	ldi	r24, 0x06	; 6
 5a0:	9b e3       	ldi	r25, 0x3B	; 59
 5a2:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 5a6:	2d eb       	ldi	r18, 0xBD	; 189
 5a8:	37 e3       	ldi	r19, 0x37	; 55
 5aa:	46 e0       	ldi	r20, 0x06	; 6
 5ac:	57 e3       	ldi	r21, 0x37	; 55
 5ae:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 5b2:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 5b6:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 5ba:	62 bf       	out	0x32, r22	; 50
		TCCR0|=(1<<1);
 5bc:	83 b7       	in	r24, 0x33	; 51
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<0))==0);
 5c2:	08 b6       	in	r0, 0x38	; 56
 5c4:	00 fe       	sbrs	r0, 0
 5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <delay1+0xa8>
		TIFR|=(1<<0);
 5c8:	88 b7       	in	r24, 0x38	; 56
 5ca:	81 60       	ori	r24, 0x01	; 1
 5cc:	88 bf       	out	0x38, r24	; 56
		return DELAY_OK;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	c5 c0       	rjmp	.+394    	; 0x75c <delay1+0x242>
	}
	else if(t<=0.016384)//64 prescaler&no overflows
 5d2:	2d eb       	ldi	r18, 0xBD	; 189
 5d4:	37 e3       	ldi	r19, 0x37	; 55
 5d6:	46 e8       	ldi	r20, 0x86	; 134
 5d8:	5c e3       	ldi	r21, 0x3C	; 60
 5da:	c7 01       	movw	r24, r14
 5dc:	b6 01       	movw	r22, r12
 5de:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__cmpsf2>
 5e2:	18 16       	cp	r1, r24
 5e4:	14 f1       	brlt	.+68     	; 0x62a <delay1+0x110>
	{
		TCCR0=0x00;
 5e6:	13 be       	out	0x33, r1	; 51
		TCNT0=(ceil)((0.016384-t)/0.000064);
 5e8:	a7 01       	movw	r20, r14
 5ea:	96 01       	movw	r18, r12
 5ec:	6d eb       	ldi	r22, 0xBD	; 189
 5ee:	77 e3       	ldi	r23, 0x37	; 55
 5f0:	86 e8       	ldi	r24, 0x86	; 134
 5f2:	9c e3       	ldi	r25, 0x3C	; 60
 5f4:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 5f8:	2d eb       	ldi	r18, 0xBD	; 189
 5fa:	37 e3       	ldi	r19, 0x37	; 55
 5fc:	46 e8       	ldi	r20, 0x86	; 134
 5fe:	58 e3       	ldi	r21, 0x38	; 56
 600:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 604:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 608:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 60c:	62 bf       	out	0x32, r22	; 50
		TCCR0|=(1<<0);
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	81 60       	ori	r24, 0x01	; 1
 612:	83 bf       	out	0x33, r24	; 51
		TCCR0|=(1<<1);
 614:	83 b7       	in	r24, 0x33	; 51
 616:	82 60       	ori	r24, 0x02	; 2
 618:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<0))==0);
 61a:	08 b6       	in	r0, 0x38	; 56
 61c:	00 fe       	sbrs	r0, 0
 61e:	fd cf       	rjmp	.-6      	; 0x61a <delay1+0x100>
		TIFR|=(1<<0);
 620:	88 b7       	in	r24, 0x38	; 56
 622:	81 60       	ori	r24, 0x01	; 1
 624:	88 bf       	out	0x38, r24	; 56
		return DELAY_OK;
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	99 c0       	rjmp	.+306    	; 0x75c <delay1+0x242>
	}
	else if(t<=0.065536)//256 prescaler&no overflows
 62a:	2d eb       	ldi	r18, 0xBD	; 189
 62c:	37 e3       	ldi	r19, 0x37	; 55
 62e:	46 e8       	ldi	r20, 0x86	; 134
 630:	5d e3       	ldi	r21, 0x3D	; 61
 632:	c7 01       	movw	r24, r14
 634:	b6 01       	movw	r22, r12
 636:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__cmpsf2>
 63a:	18 16       	cp	r1, r24
 63c:	fc f0       	brlt	.+62     	; 0x67c <delay1+0x162>
	{
		TCCR0=0x00;
 63e:	13 be       	out	0x33, r1	; 51
		TCNT0=(ceil)((0.065536-t)/0.000256);
 640:	a7 01       	movw	r20, r14
 642:	96 01       	movw	r18, r12
 644:	6d eb       	ldi	r22, 0xBD	; 189
 646:	77 e3       	ldi	r23, 0x37	; 55
 648:	86 e8       	ldi	r24, 0x86	; 134
 64a:	9d e3       	ldi	r25, 0x3D	; 61
 64c:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 650:	2d eb       	ldi	r18, 0xBD	; 189
 652:	37 e3       	ldi	r19, 0x37	; 55
 654:	46 e8       	ldi	r20, 0x86	; 134
 656:	59 e3       	ldi	r21, 0x39	; 57
 658:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 65c:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 660:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 664:	62 bf       	out	0x32, r22	; 50
		TCCR0|=(1<<2);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	84 60       	ori	r24, 0x04	; 4
 66a:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<0))==0);
 66c:	08 b6       	in	r0, 0x38	; 56
 66e:	00 fe       	sbrs	r0, 0
 670:	fd cf       	rjmp	.-6      	; 0x66c <delay1+0x152>
		TIFR|=(1<<0);
 672:	88 b7       	in	r24, 0x38	; 56
 674:	81 60       	ori	r24, 0x01	; 1
 676:	88 bf       	out	0x38, r24	; 56
		return DELAY_OK;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	70 c0       	rjmp	.+224    	; 0x75c <delay1+0x242>
	}
	else if(t<=0.262144)//1024 prescaler&no overflows
 67c:	2d eb       	ldi	r18, 0xBD	; 189
 67e:	37 e3       	ldi	r19, 0x37	; 55
 680:	46 e8       	ldi	r20, 0x86	; 134
 682:	5e e3       	ldi	r21, 0x3E	; 62
 684:	c7 01       	movw	r24, r14
 686:	b6 01       	movw	r22, r12
 688:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__cmpsf2>
 68c:	18 16       	cp	r1, r24
 68e:	04 f1       	brlt	.+64     	; 0x6d0 <delay1+0x1b6>
	{
		TCCR0=0x00;
 690:	13 be       	out	0x33, r1	; 51
		TCNT0=(int)((0.262144-t)/0.001024);
 692:	a7 01       	movw	r20, r14
 694:	96 01       	movw	r18, r12
 696:	6d eb       	ldi	r22, 0xBD	; 189
 698:	77 e3       	ldi	r23, 0x37	; 55
 69a:	86 e8       	ldi	r24, 0x86	; 134
 69c:	9e e3       	ldi	r25, 0x3E	; 62
 69e:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 6a2:	2d eb       	ldi	r18, 0xBD	; 189
 6a4:	37 e3       	ldi	r19, 0x37	; 55
 6a6:	46 e8       	ldi	r20, 0x86	; 134
 6a8:	5a e3       	ldi	r21, 0x3A	; 58
 6aa:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 6ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixsfsi>
 6b2:	62 bf       	out	0x32, r22	; 50
		TCCR0|=(1<<0);
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	83 bf       	out	0x33, r24	; 51
		TCCR0|=(1<<2);
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	84 60       	ori	r24, 0x04	; 4
 6be:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<0))==0);
 6c0:	08 b6       	in	r0, 0x38	; 56
 6c2:	00 fe       	sbrs	r0, 0
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <delay1+0x1a6>
		TIFR|=(1<<0);
 6c6:	88 b7       	in	r24, 0x38	; 56
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	88 bf       	out	0x38, r24	; 56
		return DELAY_OK;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	46 c0       	rjmp	.+140    	; 0x75c <delay1+0x242>
	}
	else if(t>0.262144)//1024 prescaler & overflows
 6d0:	2d eb       	ldi	r18, 0xBD	; 189
 6d2:	37 e3       	ldi	r19, 0x37	; 55
 6d4:	46 e8       	ldi	r20, 0x86	; 134
 6d6:	5e e3       	ldi	r21, 0x3E	; 62
 6d8:	c7 01       	movw	r24, r14
 6da:	b6 01       	movw	r22, r12
 6dc:	0e 94 90 06 	call	0xd20	; 0xd20 <__gesf2>
 6e0:	18 16       	cp	r1, r24
 6e2:	dc f5       	brge	.+118    	; 0x75a <delay1+0x240>
	{
		n_o_overflow=(ceil)(t/0.262144);
 6e4:	2d eb       	ldi	r18, 0xBD	; 189
 6e6:	37 e3       	ldi	r19, 0x37	; 55
 6e8:	46 e8       	ldi	r20, 0x86	; 134
 6ea:	5e e3       	ldi	r21, 0x3E	; 62
 6ec:	c7 01       	movw	r24, r14
 6ee:	b6 01       	movw	r22, r12
 6f0:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 6f4:	4b 01       	movw	r8, r22
 6f6:	5c 01       	movw	r10, r24
 6f8:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 6fc:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixsfsi>
 700:	eb 01       	movw	r28, r22
		while(n_o_overflow)
 702:	27 c0       	rjmp	.+78     	; 0x752 <delay1+0x238>
		{
			TCCR0=0x00;
 704:	13 be       	out	0x33, r1	; 51
			TCNT0=(ceil)((256- ((t/0.001024)/(t/0.262144))));
 706:	2d eb       	ldi	r18, 0xBD	; 189
 708:	37 e3       	ldi	r19, 0x37	; 55
 70a:	46 e8       	ldi	r20, 0x86	; 134
 70c:	5a e3       	ldi	r21, 0x3A	; 58
 70e:	c7 01       	movw	r24, r14
 710:	b6 01       	movw	r22, r12
 712:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 716:	a5 01       	movw	r20, r10
 718:	94 01       	movw	r18, r8
 71a:	0e 94 32 05 	call	0xa64	; 0xa64 <__divsf3>
 71e:	9b 01       	movw	r18, r22
 720:	ac 01       	movw	r20, r24
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	93 e4       	ldi	r25, 0x43	; 67
 72a:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
 72e:	0e 94 16 05 	call	0xa2c	; 0xa2c <ceil>
 732:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 736:	62 bf       	out	0x32, r22	; 50
			TCCR0|=(1<<0);
 738:	83 b7       	in	r24, 0x33	; 51
 73a:	81 60       	ori	r24, 0x01	; 1
 73c:	83 bf       	out	0x33, r24	; 51
			TCCR0|=(1<<2);
 73e:	83 b7       	in	r24, 0x33	; 51
 740:	84 60       	ori	r24, 0x04	; 4
 742:	83 bf       	out	0x33, r24	; 51
			while((TIFR & (1<<0))==0);
 744:	08 b6       	in	r0, 0x38	; 56
 746:	00 fe       	sbrs	r0, 0
 748:	fd cf       	rjmp	.-6      	; 0x744 <delay1+0x22a>
			TIFR|=(1<<0);
 74a:	88 b7       	in	r24, 0x38	; 56
 74c:	81 60       	ori	r24, 0x01	; 1
 74e:	88 bf       	out	0x38, r24	; 56
			n_o_overflow --;
 750:	21 97       	sbiw	r28, 0x01	; 1
		return DELAY_OK;
	}
	else if(t>0.262144)//1024 prescaler & overflows
	{
		n_o_overflow=(ceil)(t/0.262144);
		while(n_o_overflow)
 752:	20 97       	sbiw	r28, 0x00	; 0
 754:	b9 f6       	brne	.-82     	; 0x704 <delay1+0x1ea>
			TCCR0|=(1<<2);
			while((TIFR & (1<<0))==0);
			TIFR|=(1<<0);
			n_o_overflow --;
		}
		return DELAY_OK;
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	01 c0       	rjmp	.+2      	; 0x75c <delay1+0x242>
	}
	else
	return DELAY_ERROR;
 75a:	81 e0       	ldi	r24, 0x01	; 1
}
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	ff 90       	pop	r15
 762:	ef 90       	pop	r14
 764:	df 90       	pop	r13
 766:	cf 90       	pop	r12
 768:	bf 90       	pop	r11
 76a:	af 90       	pop	r10
 76c:	9f 90       	pop	r9
 76e:	8f 90       	pop	r8
 770:	08 95       	ret

00000772 <DIO_toggle>:
			return ERROR;
			break;
		}
}
DIO_ERROR DIO_toggle(vuint8_t portnumber,vuint8_t pinnumber)
{
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	00 d0       	rcall	.+0      	; 0x778 <DIO_toggle+0x6>
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portnumber,pinnumber,HIGH);
 780:	6a 81       	ldd	r22, Y+2	; 0x02
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_write>
	delay1(5);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	80 ea       	ldi	r24, 0xA0	; 160
 790:	90 e4       	ldi	r25, 0x40	; 64
 792:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	DIO_write(portnumber,pinnumber,LOW);
 796:	6a 81       	ldd	r22, Y+2	; 0x02
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_write>
	delay1(5);
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	80 ea       	ldi	r24, 0xA0	; 160
 7a6:	90 e4       	ldi	r25, 0x40	; 64
 7a8:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	return OK;
}
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <main>:
	//DIO_init(PORT_C,3,OUTPUT);
	//LED_ON(LED_C,5);
	//LED_OFF(PORT_C,5);	
    //while (1) 
    //{
	APP_INIT();
 7b8:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_INIT>
    //}
}
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	08 95       	ret

000007c2 <NORMAL_MODE>:
 *  Author: MOSTAFA EMARY
 */ 
#include "normal.h"
char LED;
char NORMAL_MODE()
{
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
	LED_ON(LED_A,0);
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	81 e4       	ldi	r24, 0x41	; 65
 7cc:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	LED='G';
 7d0:	87 e4       	ldi	r24, 0x47	; 71
 7d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	delay1(5);
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 ea       	ldi	r24, 0xA0	; 160
 7dc:	90 e4       	ldi	r25, 0x40	; 64
 7de:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	LED_OFF(LED_A,0);
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	81 e4       	ldi	r24, 0x41	; 65
 7e6:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	LED='Y';
 7ea:	c9 e5       	ldi	r28, 0x59	; 89
 7ec:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_BLINK(LED_A,1,5,.5);
 7f0:	00 e0       	ldi	r16, 0x00	; 0
 7f2:	10 e0       	ldi	r17, 0x00	; 0
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	3f e3       	ldi	r19, 0x3F	; 63
 7f8:	45 e0       	ldi	r20, 0x05	; 5
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	61 e0       	ldi	r22, 0x01	; 1
 7fe:	81 e4       	ldi	r24, 0x41	; 65
 800:	0e 94 1b 01 	call	0x236	; 0x236 <LED_BLINK>
	LED_ON(LED_A,2);
 804:	62 e0       	ldi	r22, 0x02	; 2
 806:	81 e4       	ldi	r24, 0x41	; 65
 808:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	LED='R';
 80c:	82 e5       	ldi	r24, 0x52	; 82
 80e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	delay1(5);
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	80 ea       	ldi	r24, 0xA0	; 160
 818:	90 e4       	ldi	r25, 0x40	; 64
 81a:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	LED_OFF(LED_A,2);
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	81 e4       	ldi	r24, 0x41	; 65
 822:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	LED='Y';
 826:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_BLINK(LED_A,1,5,.5);
 82a:	00 e0       	ldi	r16, 0x00	; 0
 82c:	10 e0       	ldi	r17, 0x00	; 0
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	3f e3       	ldi	r19, 0x3F	; 63
 832:	45 e0       	ldi	r20, 0x05	; 5
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	81 e4       	ldi	r24, 0x41	; 65
 83a:	0e 94 1b 01 	call	0x236	; 0x236 <LED_BLINK>
	return LED;
 83e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	08 95       	ret

0000084a <mode1>:
	return PREDESTRAIN_OK;
}

MODE_ID mode1()
{
	LED_ON(LED_A,2);
 84a:	62 e0       	ldi	r22, 0x02	; 2
 84c:	81 e4       	ldi	r24, 0x41	; 65
 84e:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	LED_ON(LED_B,0);
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	82 e4       	ldi	r24, 0x42	; 66
 856:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	delay1(5);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	80 ea       	ldi	r24, 0xA0	; 160
 860:	90 e4       	ldi	r25, 0x40	; 64
 862:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	LED_OFF(LED_A,2);
 866:	62 e0       	ldi	r22, 0x02	; 2
 868:	81 e4       	ldi	r24, 0x41	; 65
 86a:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	LED_OFF(LED_B,0);
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	82 e4       	ldi	r24, 0x42	; 66
 872:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	return MODE1;
}
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret

0000087a <mode2>:
MODE_ID mode2()
{
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
	LED_ON(LED_B,2);
 87e:	62 e0       	ldi	r22, 0x02	; 2
 880:	82 e4       	ldi	r24, 0x42	; 66
 882:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	int i=5;
 886:	c5 e0       	ldi	r28, 0x05	; 5
 888:	d0 e0       	ldi	r29, 0x00	; 0
	while (i)
 88a:	1d c0       	rjmp	.+58     	; 0x8c6 <mode2+0x4c>
	{
		LED_ON(LED_B,1);
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	82 e4       	ldi	r24, 0x42	; 66
 890:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
		LED_ON(LED_A,1);
 894:	61 e0       	ldi	r22, 0x01	; 1
 896:	81 e4       	ldi	r24, 0x41	; 65
 898:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
		delay1(.5);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	9f e3       	ldi	r25, 0x3F	; 63
 8a4:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
		LED_OFF(LED_B,1);
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	82 e4       	ldi	r24, 0x42	; 66
 8ac:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
		LED_OFF(LED_A,1);
 8b0:	61 e0       	ldi	r22, 0x01	; 1
 8b2:	81 e4       	ldi	r24, 0x41	; 65
 8b4:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
		delay1(.5);
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	9f e3       	ldi	r25, 0x3F	; 63
 8c0:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
		i--;
 8c4:	21 97       	sbiw	r28, 0x01	; 1
}
MODE_ID mode2()
{
	LED_ON(LED_B,2);
	int i=5;
	while (i)
 8c6:	20 97       	sbiw	r28, 0x00	; 0
 8c8:	09 f7       	brne	.-62     	; 0x88c <mode2+0x12>
		LED_OFF(LED_B,1);
		LED_OFF(LED_A,1);
		delay1(.5);
		i--;
	}
	LED_ON(LED_B,0);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	82 e4       	ldi	r24, 0x42	; 66
 8ce:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	LED_ON(LED_A,2);
 8d2:	62 e0       	ldi	r22, 0x02	; 2
 8d4:	81 e4       	ldi	r24, 0x41	; 65
 8d6:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	delay1(5);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	80 ea       	ldi	r24, 0xA0	; 160
 8e0:	90 e4       	ldi	r25, 0x40	; 64
 8e2:	0e 94 8d 02 	call	0x51a	; 0x51a <delay1>
	LED_OFF(LED_B,2);
 8e6:	62 e0       	ldi	r22, 0x02	; 2
 8e8:	82 e4       	ldi	r24, 0x42	; 66
 8ea:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	LED_OFF(LED_B,0);
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	82 e4       	ldi	r24, 0x42	; 66
 8f2:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	LED_OFF(LED_A,2);
 8f6:	62 e0       	ldi	r22, 0x02	; 2
 8f8:	81 e4       	ldi	r24, 0x41	; 65
 8fa:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
	return MODE2;
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <PREDESTRAIN_MODE>:
 *  Author: MOSTAFA EMARY
 */ 
#include "predestrain.h"
PREDESTRAIN_ERROR PREDESTRAIN_MODE(char x)
{
	if(x=='R')
 906:	82 35       	cpi	r24, 0x52	; 82
 908:	59 f4       	brne	.+22     	; 0x920 <PREDESTRAIN_MODE+0x1a>
	{
		LED_OFF(LED_A,2);
 90a:	62 e0       	ldi	r22, 0x02	; 2
 90c:	81 e4       	ldi	r24, 0x41	; 65
 90e:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
		mode1();
 912:	0e 94 25 04 	call	0x84a	; 0x84a <mode1>
		LED_ON(LED_A,2);
 916:	62 e0       	ldi	r22, 0x02	; 2
 918:	81 e4       	ldi	r24, 0x41	; 65
 91a:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
 91e:	17 c0       	rjmp	.+46     	; 0x94e <PREDESTRAIN_MODE+0x48>
	}
	else if(x=='G')
 920:	87 34       	cpi	r24, 0x47	; 71
 922:	59 f4       	brne	.+22     	; 0x93a <PREDESTRAIN_MODE+0x34>
	{
		
		LED_OFF(LED_A,0);
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	81 e4       	ldi	r24, 0x41	; 65
 928:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
		mode2();
 92c:	0e 94 3d 04 	call	0x87a	; 0x87a <mode2>
		LED_ON(LED_A,0);
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	81 e4       	ldi	r24, 0x41	; 65
 934:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
 938:	0a c0       	rjmp	.+20     	; 0x94e <PREDESTRAIN_MODE+0x48>
	}
	else
	{
		LED_OFF(LED_A,1);
 93a:	61 e0       	ldi	r22, 0x01	; 1
 93c:	81 e4       	ldi	r24, 0x41	; 65
 93e:	0e 94 05 01 	call	0x20a	; 0x20a <LED_OFF>
		mode2();
 942:	0e 94 3d 04 	call	0x87a	; 0x87a <mode2>
		LED_ON(LED_A,1);
 946:	61 e0       	ldi	r22, 0x01	; 1
 948:	81 e4       	ldi	r24, 0x41	; 65
 94a:	0e 94 c2 00 	call	0x184	; 0x184 <LED_ON>
	}
	return PREDESTRAIN_OK;
}
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	08 95       	ret

00000952 <__subsf3>:
 952:	50 58       	subi	r21, 0x80	; 128

00000954 <__addsf3>:
 954:	bb 27       	eor	r27, r27
 956:	aa 27       	eor	r26, r26
 958:	0e 94 c1 04 	call	0x982	; 0x982 <__addsf3x>
 95c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_round>
 960:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscA>
 964:	38 f0       	brcs	.+14     	; 0x974 <__addsf3+0x20>
 966:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscB>
 96a:	20 f0       	brcs	.+8      	; 0x974 <__addsf3+0x20>
 96c:	39 f4       	brne	.+14     	; 0x97c <__addsf3+0x28>
 96e:	9f 3f       	cpi	r25, 0xFF	; 255
 970:	19 f4       	brne	.+6      	; 0x978 <__addsf3+0x24>
 972:	26 f4       	brtc	.+8      	; 0x97c <__addsf3+0x28>
 974:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_nan>
 978:	0e f4       	brtc	.+2      	; 0x97c <__addsf3+0x28>
 97a:	e0 95       	com	r30
 97c:	e7 fb       	bst	r30, 7
 97e:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>

00000982 <__addsf3x>:
 982:	e9 2f       	mov	r30, r25
 984:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_split3>
 988:	58 f3       	brcs	.-42     	; 0x960 <__addsf3+0xc>
 98a:	ba 17       	cp	r27, r26
 98c:	62 07       	cpc	r22, r18
 98e:	73 07       	cpc	r23, r19
 990:	84 07       	cpc	r24, r20
 992:	95 07       	cpc	r25, r21
 994:	20 f0       	brcs	.+8      	; 0x99e <__addsf3x+0x1c>
 996:	79 f4       	brne	.+30     	; 0x9b6 <__addsf3x+0x34>
 998:	a6 f5       	brtc	.+104    	; 0xa02 <__addsf3x+0x80>
 99a:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_zero>
 99e:	0e f4       	brtc	.+2      	; 0x9a2 <__addsf3x+0x20>
 9a0:	e0 95       	com	r30
 9a2:	0b 2e       	mov	r0, r27
 9a4:	ba 2f       	mov	r27, r26
 9a6:	a0 2d       	mov	r26, r0
 9a8:	0b 01       	movw	r0, r22
 9aa:	b9 01       	movw	r22, r18
 9ac:	90 01       	movw	r18, r0
 9ae:	0c 01       	movw	r0, r24
 9b0:	ca 01       	movw	r24, r20
 9b2:	a0 01       	movw	r20, r0
 9b4:	11 24       	eor	r1, r1
 9b6:	ff 27       	eor	r31, r31
 9b8:	59 1b       	sub	r21, r25
 9ba:	99 f0       	breq	.+38     	; 0x9e2 <__addsf3x+0x60>
 9bc:	59 3f       	cpi	r21, 0xF9	; 249
 9be:	50 f4       	brcc	.+20     	; 0x9d4 <__addsf3x+0x52>
 9c0:	50 3e       	cpi	r21, 0xE0	; 224
 9c2:	68 f1       	brcs	.+90     	; 0xa1e <__addsf3x+0x9c>
 9c4:	1a 16       	cp	r1, r26
 9c6:	f0 40       	sbci	r31, 0x00	; 0
 9c8:	a2 2f       	mov	r26, r18
 9ca:	23 2f       	mov	r18, r19
 9cc:	34 2f       	mov	r19, r20
 9ce:	44 27       	eor	r20, r20
 9d0:	58 5f       	subi	r21, 0xF8	; 248
 9d2:	f3 cf       	rjmp	.-26     	; 0x9ba <__addsf3x+0x38>
 9d4:	46 95       	lsr	r20
 9d6:	37 95       	ror	r19
 9d8:	27 95       	ror	r18
 9da:	a7 95       	ror	r26
 9dc:	f0 40       	sbci	r31, 0x00	; 0
 9de:	53 95       	inc	r21
 9e0:	c9 f7       	brne	.-14     	; 0x9d4 <__addsf3x+0x52>
 9e2:	7e f4       	brtc	.+30     	; 0xa02 <__addsf3x+0x80>
 9e4:	1f 16       	cp	r1, r31
 9e6:	ba 0b       	sbc	r27, r26
 9e8:	62 0b       	sbc	r22, r18
 9ea:	73 0b       	sbc	r23, r19
 9ec:	84 0b       	sbc	r24, r20
 9ee:	ba f0       	brmi	.+46     	; 0xa1e <__addsf3x+0x9c>
 9f0:	91 50       	subi	r25, 0x01	; 1
 9f2:	a1 f0       	breq	.+40     	; 0xa1c <__addsf3x+0x9a>
 9f4:	ff 0f       	add	r31, r31
 9f6:	bb 1f       	adc	r27, r27
 9f8:	66 1f       	adc	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	c2 f7       	brpl	.-16     	; 0x9f0 <__addsf3x+0x6e>
 a00:	0e c0       	rjmp	.+28     	; 0xa1e <__addsf3x+0x9c>
 a02:	ba 0f       	add	r27, r26
 a04:	62 1f       	adc	r22, r18
 a06:	73 1f       	adc	r23, r19
 a08:	84 1f       	adc	r24, r20
 a0a:	48 f4       	brcc	.+18     	; 0xa1e <__addsf3x+0x9c>
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f7 95       	ror	r31
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	08 f0       	brcs	.+2      	; 0xa1c <__addsf3x+0x9a>
 a1a:	b0 cf       	rjmp	.-160    	; 0x97c <__addsf3+0x28>
 a1c:	93 95       	inc	r25
 a1e:	88 0f       	add	r24, r24
 a20:	08 f0       	brcs	.+2      	; 0xa24 <__addsf3x+0xa2>
 a22:	99 27       	eor	r25, r25
 a24:	ee 0f       	add	r30, r30
 a26:	97 95       	ror	r25
 a28:	87 95       	ror	r24
 a2a:	08 95       	ret

00000a2c <ceil>:
 a2c:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_trunc>
 a30:	90 f0       	brcs	.+36     	; 0xa56 <ceil+0x2a>
 a32:	9f 37       	cpi	r25, 0x7F	; 127
 a34:	48 f4       	brcc	.+18     	; 0xa48 <ceil+0x1c>
 a36:	91 11       	cpse	r25, r1
 a38:	16 f4       	brtc	.+4      	; 0xa3e <ceil+0x12>
 a3a:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	80 e8       	ldi	r24, 0x80	; 128
 a44:	9f e3       	ldi	r25, 0x3F	; 63
 a46:	08 95       	ret
 a48:	26 f0       	brts	.+8      	; 0xa52 <ceil+0x26>
 a4a:	1b 16       	cp	r1, r27
 a4c:	61 1d       	adc	r22, r1
 a4e:	71 1d       	adc	r23, r1
 a50:	81 1d       	adc	r24, r1
 a52:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_mintl>
 a56:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_mpack>

00000a5a <__cmpsf2>:
 a5a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_cmp>
 a5e:	08 f4       	brcc	.+2      	; 0xa62 <__cmpsf2+0x8>
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	08 95       	ret

00000a64 <__divsf3>:
 a64:	0e 94 46 05 	call	0xa8c	; 0xa8c <__divsf3x>
 a68:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_round>
 a6c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscB>
 a70:	58 f0       	brcs	.+22     	; 0xa88 <__divsf3+0x24>
 a72:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscA>
 a76:	40 f0       	brcs	.+16     	; 0xa88 <__divsf3+0x24>
 a78:	29 f4       	brne	.+10     	; 0xa84 <__divsf3+0x20>
 a7a:	5f 3f       	cpi	r21, 0xFF	; 255
 a7c:	29 f0       	breq	.+10     	; 0xa88 <__divsf3+0x24>
 a7e:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
 a82:	51 11       	cpse	r21, r1
 a84:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 a88:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_nan>

00000a8c <__divsf3x>:
 a8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_split3>
 a90:	68 f3       	brcs	.-38     	; 0xa6c <__divsf3+0x8>

00000a92 <__divsf3_pse>:
 a92:	99 23       	and	r25, r25
 a94:	b1 f3       	breq	.-20     	; 0xa82 <__divsf3+0x1e>
 a96:	55 23       	and	r21, r21
 a98:	91 f3       	breq	.-28     	; 0xa7e <__divsf3+0x1a>
 a9a:	95 1b       	sub	r25, r21
 a9c:	55 0b       	sbc	r21, r21
 a9e:	bb 27       	eor	r27, r27
 aa0:	aa 27       	eor	r26, r26
 aa2:	62 17       	cp	r22, r18
 aa4:	73 07       	cpc	r23, r19
 aa6:	84 07       	cpc	r24, r20
 aa8:	38 f0       	brcs	.+14     	; 0xab8 <__divsf3_pse+0x26>
 aaa:	9f 5f       	subi	r25, 0xFF	; 255
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	22 0f       	add	r18, r18
 ab0:	33 1f       	adc	r19, r19
 ab2:	44 1f       	adc	r20, r20
 ab4:	aa 1f       	adc	r26, r26
 ab6:	a9 f3       	breq	.-22     	; 0xaa2 <__divsf3_pse+0x10>
 ab8:	35 d0       	rcall	.+106    	; 0xb24 <__divsf3_pse+0x92>
 aba:	0e 2e       	mov	r0, r30
 abc:	3a f0       	brmi	.+14     	; 0xacc <__divsf3_pse+0x3a>
 abe:	e0 e8       	ldi	r30, 0x80	; 128
 ac0:	32 d0       	rcall	.+100    	; 0xb26 <__divsf3_pse+0x94>
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	50 40       	sbci	r21, 0x00	; 0
 ac6:	e6 95       	lsr	r30
 ac8:	00 1c       	adc	r0, r0
 aca:	ca f7       	brpl	.-14     	; 0xabe <__divsf3_pse+0x2c>
 acc:	2b d0       	rcall	.+86     	; 0xb24 <__divsf3_pse+0x92>
 ace:	fe 2f       	mov	r31, r30
 ad0:	29 d0       	rcall	.+82     	; 0xb24 <__divsf3_pse+0x92>
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	bb 1f       	adc	r27, r27
 ada:	26 17       	cp	r18, r22
 adc:	37 07       	cpc	r19, r23
 ade:	48 07       	cpc	r20, r24
 ae0:	ab 07       	cpc	r26, r27
 ae2:	b0 e8       	ldi	r27, 0x80	; 128
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__divsf3_pse+0x56>
 ae6:	bb 0b       	sbc	r27, r27
 ae8:	80 2d       	mov	r24, r0
 aea:	bf 01       	movw	r22, r30
 aec:	ff 27       	eor	r31, r31
 aee:	93 58       	subi	r25, 0x83	; 131
 af0:	5f 4f       	sbci	r21, 0xFF	; 255
 af2:	3a f0       	brmi	.+14     	; 0xb02 <__divsf3_pse+0x70>
 af4:	9e 3f       	cpi	r25, 0xFE	; 254
 af6:	51 05       	cpc	r21, r1
 af8:	78 f0       	brcs	.+30     	; 0xb18 <__divsf3_pse+0x86>
 afa:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
 afe:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 b02:	5f 3f       	cpi	r21, 0xFF	; 255
 b04:	e4 f3       	brlt	.-8      	; 0xafe <__divsf3_pse+0x6c>
 b06:	98 3e       	cpi	r25, 0xE8	; 232
 b08:	d4 f3       	brlt	.-12     	; 0xafe <__divsf3_pse+0x6c>
 b0a:	86 95       	lsr	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	b7 95       	ror	r27
 b12:	f7 95       	ror	r31
 b14:	9f 5f       	subi	r25, 0xFF	; 255
 b16:	c9 f7       	brne	.-14     	; 0xb0a <__divsf3_pse+0x78>
 b18:	88 0f       	add	r24, r24
 b1a:	91 1d       	adc	r25, r1
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret
 b24:	e1 e0       	ldi	r30, 0x01	; 1
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	bb 1f       	adc	r27, r27
 b2e:	62 17       	cp	r22, r18
 b30:	73 07       	cpc	r23, r19
 b32:	84 07       	cpc	r24, r20
 b34:	ba 07       	cpc	r27, r26
 b36:	20 f0       	brcs	.+8      	; 0xb40 <__divsf3_pse+0xae>
 b38:	62 1b       	sub	r22, r18
 b3a:	73 0b       	sbc	r23, r19
 b3c:	84 0b       	sbc	r24, r20
 b3e:	ba 0b       	sbc	r27, r26
 b40:	ee 1f       	adc	r30, r30
 b42:	88 f7       	brcc	.-30     	; 0xb26 <__divsf3_pse+0x94>
 b44:	e0 95       	com	r30
 b46:	08 95       	ret

00000b48 <__fixsfsi>:
 b48:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 b4c:	68 94       	set
 b4e:	b1 11       	cpse	r27, r1
 b50:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_szero>
 b54:	08 95       	ret

00000b56 <__fixunssfsi>:
 b56:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_splitA>
 b5a:	88 f0       	brcs	.+34     	; 0xb7e <__fixunssfsi+0x28>
 b5c:	9f 57       	subi	r25, 0x7F	; 127
 b5e:	98 f0       	brcs	.+38     	; 0xb86 <__fixunssfsi+0x30>
 b60:	b9 2f       	mov	r27, r25
 b62:	99 27       	eor	r25, r25
 b64:	b7 51       	subi	r27, 0x17	; 23
 b66:	b0 f0       	brcs	.+44     	; 0xb94 <__fixunssfsi+0x3e>
 b68:	e1 f0       	breq	.+56     	; 0xba2 <__fixunssfsi+0x4c>
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	1a f0       	brmi	.+6      	; 0xb7a <__fixunssfsi+0x24>
 b74:	ba 95       	dec	r27
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__fixunssfsi+0x14>
 b78:	14 c0       	rjmp	.+40     	; 0xba2 <__fixunssfsi+0x4c>
 b7a:	b1 30       	cpi	r27, 0x01	; 1
 b7c:	91 f0       	breq	.+36     	; 0xba2 <__fixunssfsi+0x4c>
 b7e:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_zero>
 b82:	b1 e0       	ldi	r27, 0x01	; 1
 b84:	08 95       	ret
 b86:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_zero>
 b8a:	67 2f       	mov	r22, r23
 b8c:	78 2f       	mov	r23, r24
 b8e:	88 27       	eor	r24, r24
 b90:	b8 5f       	subi	r27, 0xF8	; 248
 b92:	39 f0       	breq	.+14     	; 0xba2 <__fixunssfsi+0x4c>
 b94:	b9 3f       	cpi	r27, 0xF9	; 249
 b96:	cc f3       	brlt	.-14     	; 0xb8a <__fixunssfsi+0x34>
 b98:	86 95       	lsr	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	b3 95       	inc	r27
 ba0:	d9 f7       	brne	.-10     	; 0xb98 <__fixunssfsi+0x42>
 ba2:	3e f4       	brtc	.+14     	; 0xbb2 <__fixunssfsi+0x5c>
 ba4:	90 95       	com	r25
 ba6:	80 95       	com	r24
 ba8:	70 95       	com	r23
 baa:	61 95       	neg	r22
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	08 95       	ret

00000bb4 <__fp_cmp>:
 bb4:	99 0f       	add	r25, r25
 bb6:	00 08       	sbc	r0, r0
 bb8:	55 0f       	add	r21, r21
 bba:	aa 0b       	sbc	r26, r26
 bbc:	e0 e8       	ldi	r30, 0x80	; 128
 bbe:	fe ef       	ldi	r31, 0xFE	; 254
 bc0:	16 16       	cp	r1, r22
 bc2:	17 06       	cpc	r1, r23
 bc4:	e8 07       	cpc	r30, r24
 bc6:	f9 07       	cpc	r31, r25
 bc8:	c0 f0       	brcs	.+48     	; 0xbfa <__fp_cmp+0x46>
 bca:	12 16       	cp	r1, r18
 bcc:	13 06       	cpc	r1, r19
 bce:	e4 07       	cpc	r30, r20
 bd0:	f5 07       	cpc	r31, r21
 bd2:	98 f0       	brcs	.+38     	; 0xbfa <__fp_cmp+0x46>
 bd4:	62 1b       	sub	r22, r18
 bd6:	73 0b       	sbc	r23, r19
 bd8:	84 0b       	sbc	r24, r20
 bda:	95 0b       	sbc	r25, r21
 bdc:	39 f4       	brne	.+14     	; 0xbec <__fp_cmp+0x38>
 bde:	0a 26       	eor	r0, r26
 be0:	61 f0       	breq	.+24     	; 0xbfa <__fp_cmp+0x46>
 be2:	23 2b       	or	r18, r19
 be4:	24 2b       	or	r18, r20
 be6:	25 2b       	or	r18, r21
 be8:	21 f4       	brne	.+8      	; 0xbf2 <__fp_cmp+0x3e>
 bea:	08 95       	ret
 bec:	0a 26       	eor	r0, r26
 bee:	09 f4       	brne	.+2      	; 0xbf2 <__fp_cmp+0x3e>
 bf0:	a1 40       	sbci	r26, 0x01	; 1
 bf2:	a6 95       	lsr	r26
 bf4:	8f ef       	ldi	r24, 0xFF	; 255
 bf6:	81 1d       	adc	r24, r1
 bf8:	81 1d       	adc	r24, r1
 bfa:	08 95       	ret

00000bfc <__fp_inf>:
 bfc:	97 f9       	bld	r25, 7
 bfe:	9f 67       	ori	r25, 0x7F	; 127
 c00:	80 e8       	ldi	r24, 0x80	; 128
 c02:	70 e0       	ldi	r23, 0x00	; 0
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	08 95       	ret

00000c08 <__fp_mintl>:
 c08:	88 23       	and	r24, r24
 c0a:	71 f4       	brne	.+28     	; 0xc28 <__fp_mintl+0x20>
 c0c:	77 23       	and	r23, r23
 c0e:	21 f0       	breq	.+8      	; 0xc18 <__fp_mintl+0x10>
 c10:	98 50       	subi	r25, 0x08	; 8
 c12:	87 2b       	or	r24, r23
 c14:	76 2f       	mov	r23, r22
 c16:	07 c0       	rjmp	.+14     	; 0xc26 <__fp_mintl+0x1e>
 c18:	66 23       	and	r22, r22
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_mintl+0x18>
 c1c:	99 27       	eor	r25, r25
 c1e:	0d c0       	rjmp	.+26     	; 0xc3a <__fp_mintl+0x32>
 c20:	90 51       	subi	r25, 0x10	; 16
 c22:	86 2b       	or	r24, r22
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	2a f0       	brmi	.+10     	; 0xc34 <__fp_mintl+0x2c>
 c2a:	9a 95       	dec	r25
 c2c:	66 0f       	add	r22, r22
 c2e:	77 1f       	adc	r23, r23
 c30:	88 1f       	adc	r24, r24
 c32:	da f7       	brpl	.-10     	; 0xc2a <__fp_mintl+0x22>
 c34:	88 0f       	add	r24, r24
 c36:	96 95       	lsr	r25
 c38:	87 95       	ror	r24
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__fp_mpack>:
 c3e:	9f 3f       	cpi	r25, 0xFF	; 255
 c40:	31 f0       	breq	.+12     	; 0xc4e <__fp_mpack_finite+0xc>

00000c42 <__fp_mpack_finite>:
 c42:	91 50       	subi	r25, 0x01	; 1
 c44:	20 f4       	brcc	.+8      	; 0xc4e <__fp_mpack_finite+0xc>
 c46:	87 95       	ror	r24
 c48:	77 95       	ror	r23
 c4a:	67 95       	ror	r22
 c4c:	b7 95       	ror	r27
 c4e:	88 0f       	add	r24, r24
 c50:	91 1d       	adc	r25, r1
 c52:	96 95       	lsr	r25
 c54:	87 95       	ror	r24
 c56:	97 f9       	bld	r25, 7
 c58:	08 95       	ret

00000c5a <__fp_nan>:
 c5a:	9f ef       	ldi	r25, 0xFF	; 255
 c5c:	80 ec       	ldi	r24, 0xC0	; 192
 c5e:	08 95       	ret

00000c60 <__fp_pscA>:
 c60:	00 24       	eor	r0, r0
 c62:	0a 94       	dec	r0
 c64:	16 16       	cp	r1, r22
 c66:	17 06       	cpc	r1, r23
 c68:	18 06       	cpc	r1, r24
 c6a:	09 06       	cpc	r0, r25
 c6c:	08 95       	ret

00000c6e <__fp_pscB>:
 c6e:	00 24       	eor	r0, r0
 c70:	0a 94       	dec	r0
 c72:	12 16       	cp	r1, r18
 c74:	13 06       	cpc	r1, r19
 c76:	14 06       	cpc	r1, r20
 c78:	05 06       	cpc	r0, r21
 c7a:	08 95       	ret

00000c7c <__fp_round>:
 c7c:	09 2e       	mov	r0, r25
 c7e:	03 94       	inc	r0
 c80:	00 0c       	add	r0, r0
 c82:	11 f4       	brne	.+4      	; 0xc88 <__fp_round+0xc>
 c84:	88 23       	and	r24, r24
 c86:	52 f0       	brmi	.+20     	; 0xc9c <__fp_round+0x20>
 c88:	bb 0f       	add	r27, r27
 c8a:	40 f4       	brcc	.+16     	; 0xc9c <__fp_round+0x20>
 c8c:	bf 2b       	or	r27, r31
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__fp_round+0x18>
 c90:	60 ff       	sbrs	r22, 0
 c92:	04 c0       	rjmp	.+8      	; 0xc9c <__fp_round+0x20>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

00000c9e <__fp_split3>:
 c9e:	57 fd       	sbrc	r21, 7
 ca0:	90 58       	subi	r25, 0x80	; 128
 ca2:	44 0f       	add	r20, r20
 ca4:	55 1f       	adc	r21, r21
 ca6:	59 f0       	breq	.+22     	; 0xcbe <__fp_splitA+0x10>
 ca8:	5f 3f       	cpi	r21, 0xFF	; 255
 caa:	71 f0       	breq	.+28     	; 0xcc8 <__fp_splitA+0x1a>
 cac:	47 95       	ror	r20

00000cae <__fp_splitA>:
 cae:	88 0f       	add	r24, r24
 cb0:	97 fb       	bst	r25, 7
 cb2:	99 1f       	adc	r25, r25
 cb4:	61 f0       	breq	.+24     	; 0xcce <__fp_splitA+0x20>
 cb6:	9f 3f       	cpi	r25, 0xFF	; 255
 cb8:	79 f0       	breq	.+30     	; 0xcd8 <__fp_splitA+0x2a>
 cba:	87 95       	ror	r24
 cbc:	08 95       	ret
 cbe:	12 16       	cp	r1, r18
 cc0:	13 06       	cpc	r1, r19
 cc2:	14 06       	cpc	r1, r20
 cc4:	55 1f       	adc	r21, r21
 cc6:	f2 cf       	rjmp	.-28     	; 0xcac <__fp_split3+0xe>
 cc8:	46 95       	lsr	r20
 cca:	f1 df       	rcall	.-30     	; 0xcae <__fp_splitA>
 ccc:	08 c0       	rjmp	.+16     	; 0xcde <__fp_splitA+0x30>
 cce:	16 16       	cp	r1, r22
 cd0:	17 06       	cpc	r1, r23
 cd2:	18 06       	cpc	r1, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	f1 cf       	rjmp	.-30     	; 0xcba <__fp_splitA+0xc>
 cd8:	86 95       	lsr	r24
 cda:	71 05       	cpc	r23, r1
 cdc:	61 05       	cpc	r22, r1
 cde:	08 94       	sec
 ce0:	08 95       	ret

00000ce2 <__fp_trunc>:
 ce2:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_splitA>
 ce6:	a0 f0       	brcs	.+40     	; 0xd10 <__fp_trunc+0x2e>
 ce8:	be e7       	ldi	r27, 0x7E	; 126
 cea:	b9 17       	cp	r27, r25
 cec:	88 f4       	brcc	.+34     	; 0xd10 <__fp_trunc+0x2e>
 cee:	bb 27       	eor	r27, r27
 cf0:	9f 38       	cpi	r25, 0x8F	; 143
 cf2:	60 f4       	brcc	.+24     	; 0xd0c <__fp_trunc+0x2a>
 cf4:	16 16       	cp	r1, r22
 cf6:	b1 1d       	adc	r27, r1
 cf8:	67 2f       	mov	r22, r23
 cfa:	78 2f       	mov	r23, r24
 cfc:	88 27       	eor	r24, r24
 cfe:	98 5f       	subi	r25, 0xF8	; 248
 d00:	f7 cf       	rjmp	.-18     	; 0xcf0 <__fp_trunc+0xe>
 d02:	86 95       	lsr	r24
 d04:	77 95       	ror	r23
 d06:	67 95       	ror	r22
 d08:	b1 1d       	adc	r27, r1
 d0a:	93 95       	inc	r25
 d0c:	96 39       	cpi	r25, 0x96	; 150
 d0e:	c8 f3       	brcs	.-14     	; 0xd02 <__fp_trunc+0x20>
 d10:	08 95       	ret

00000d12 <__fp_zero>:
 d12:	e8 94       	clt

00000d14 <__fp_szero>:
 d14:	bb 27       	eor	r27, r27
 d16:	66 27       	eor	r22, r22
 d18:	77 27       	eor	r23, r23
 d1a:	cb 01       	movw	r24, r22
 d1c:	97 f9       	bld	r25, 7
 d1e:	08 95       	ret

00000d20 <__gesf2>:
 d20:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_cmp>
 d24:	08 f4       	brcc	.+2      	; 0xd28 <__gesf2+0x8>
 d26:	8f ef       	ldi	r24, 0xFF	; 255
 d28:	08 95       	ret

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
